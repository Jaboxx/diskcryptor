;
;   *
;   * DiskCryptor - open source partition encryption tool
;   * Copyright (c) 2007
;   * ntldr <ntldr@freed0m.org> PGP key ID - 0xC48251EB4F8E4E6E
;   *
;   This program is free software: you can redistribute it and/or modify
;   it under the terms of the GNU General Public License as published by
;   the Free Software Foundation, either version 3 of the License, or
;   (at your option) any later version.
;
;   This program is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
;
;   You should have received a copy of the GNU General Public License
;   along with this program.  If not, see <http://www.gnu.org/licenses/>.
;


format PE GUI 4.0

section '.code' code readable executable

include '%include%\win32a.inc'

Te0   = 45670000h or 0
Te1   = 45670000h or 1
Te2   = 45670000h or 2
Te3   = 45670000h or 3
Te4_1 = 45670000h or 4
Te4_2 = 45670000h or 5
Te4_3 = 45670000h or 6
Te4_4 = 45670000h or 7
Td0   = 45670000h or 8
Td1   = 45670000h or 9
Td2   = 45670000h or 10
Td3   = 45670000h or 11
Td4_1 = 45670000h or 12
Td4_2 = 45670000h or 13
Td4_3 = 45670000h or 14
Td4_4 = 45670000h or 15

rept 60 num
{
  RK_#num = 12340000h or (num-1)
}


aes_dec_begin:
 push	 edi
 push	 esi
 push	 ebp
 push	 ebx
 sub	 esp, 14h
 mov	 [esp], edx
 mov	 edx, [ecx]
 xor	 edx, RK_1
 mov	 eax, [ecx+4]
 xor	 eax, RK_2
 mov	 ebx, [ecx+8]
 xor	 ebx, RK_3
 mov	 edi, [ecx+0Ch]
 xor	 edi, RK_4
 movzx	 ecx, dl
 mov	 esi, [Td0+ecx*4]
 mov	 ecx, edi
 shr	 ecx, 8
 movzx	 ecx, cl
 mov	 ebp, edx
 shr	 ebp, 8
 xor	 esi, [Td1+ecx*4]
 mov	 ecx, ebx
 shr	 ecx, 10h
 movzx	 ecx, cl
 and	 ebp, 0FFh
 xor	 esi, [Td2+ecx*4]
 mov	 ecx, eax
 shr	 ecx, 18h
 xor	 esi, [Td3+ecx*4]
 xor	 esi, RK_5
 movzx	 ecx, al
 mov	 ecx, [Td0+ecx*4]
 xor	 ecx, [Td1+ebp*4]
 mov	 ebp, edi
 shr	 ebp, 10h
 and	 ebp, 0FFh
 xor	 ecx, [Td2+ebp*4]
 mov	 ebp, ebx
 shr	 ebp, 18h
 xor	 ecx, [Td3+ebp*4]
 xor	 ecx, RK_6
 mov	 [esp+8], ecx
 movzx	 ecx, bl
 mov	 ebp, [Td0+ecx*4]
 mov	 ecx, eax
 shr	 ecx, 8
 movzx	 ecx, cl
 xor	 ebp, [Td1+ecx*4]
 mov	 ecx, edx
 shr	 ecx, 10h
 movzx	 ecx, cl
 xor	 ebp, [Td2+ecx*4]
 mov	 ecx, edi
 shr	 ecx, 18h
 and	 edi, 0FFh
 shr	 ebx, 8
 xor	 ebp, [Td3+ecx*4]
 mov	 ecx, [Td0+edi*4]
 movzx	 ebx, bl
 shr	 eax, 10h
 xor	 ecx, [Td1+ebx*4]
 mov	 ebx, esi
 mov	 edi, [esp+8]
 movzx	 eax, al
 shr	 edx, 18h
 xor	 ecx, [Td2+eax*4]
 xor	 ecx, [Td3+edx*4]
 xor	 ebp, RK_7
 xor	 ecx, RK_8
 mov	 eax, esi
 and	 eax, 0FFh
 mov	 eax, [Td0+eax*4]
 mov	 edx, ecx
 shr	 edx, 8
 movzx	 edx, dl
 shr	 ebx, 8
 movzx	 ebx, bl
 xor	 eax, [Td1+edx*4]
 mov	 edx, ebp
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 eax, [Td2+edx*4]
 mov	 edx, edi
 shr	 edx, 18h
 xor	 eax, [Td3+edx*4]
 xor	 eax, RK_9
 mov	 edx, edi
 and	 edx, 0FFh
 mov	 edx, [Td0+edx*4]
 xor	 edx, [Td1+ebx*4]
 mov	 ebx, ecx
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 edx, [Td2+ebx*4]
 mov	 ebx, ebp
 shr	 ebx, 18h
 xor	 edx, [Td3+ebx*4]
 mov	 ebx, edi
 xor	 edx, RK_10
 shr	 ebx, 8
 movzx	 ebx, bl
 mov	 [esp+4], edx
 mov	 edx, ebp
 and	 edx, 0FFh
 mov	 edx, [Td0+edx*4]
 shr	 ebp, 8
 and	 ebp, 0FFh
 xor	 edx, [Td1+ebx*4]
 mov	 ebx, esi
 shr	 ebx, 10h
 movzx	 ebx, bl
 shr	 edi, 10h
 xor	 edx, [Td2+ebx*4]
 mov	 ebx, ecx
 shr	 ebx, 18h
 movzx	 ecx, cl
 and	 edi, 0FFh
 xor	 edx, [Td3+ebx*4]
 mov	 ebx, [Td0+ecx*4]
 shr	 esi, 18h
 movzx	 ecx, al
 xor	 ebx, [Td1+ebp*4]
 xor	 ebx, [Td2+edi*4]
 mov	 edi, eax
 xor	 ebx, [Td3+esi*4]
 mov	 ecx, [Td0+ecx*4]
 mov	 esi, [esp+4]
 xor	 edx, RK_11
 xor	 ebx, RK_12
 mov	 ebp, ebx
 shr	 ebp, 8
 and	 ebp, 0FFh
 xor	 ecx, [Td1+ebp*4]
 mov	 ebp, edx
 shr	 ebp, 10h
 and	 ebp, 0FFh
 xor	 ecx, [Td2+ebp*4]
 mov	 ebp, esi
 shr	 ebp, 18h
 shr	 edi, 8
 and	 edi, 0FFh
 xor	 ecx, [Td3+ebp*4]
 xor	 ecx, RK_13
 mov	 ebp, esi
 and	 ebp, 0FFh
 mov	 ebp, [Td0+ebp*4]
 xor	 ebp, [Td1+edi*4]
 mov	 edi, ebx
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ebp, [Td2+edi*4]
 mov	 edi, edx
 shr	 edi, 18h
 xor	 ebp, [Td3+edi*4]
 mov	 edi, esi
 xor	 ebp, RK_14
 shr	 edi, 8
 and	 edi, 0FFh
 mov	 [esp+8], ebp
 movzx	 ebp, dl
 mov	 ebp, [Td0+ebp*4]
 shr	 edx, 8
 movzx	 edx, dl
 xor	 ebp, [Td1+edi*4]
 mov	 edi, eax
 shr	 edi, 10h
 and	 edi, 0FFh
 shr	 esi, 10h
 xor	 ebp, [Td2+edi*4]
 mov	 edi, ebx
 shr	 edi, 18h
 movzx	 ebx, bl
 and	 esi, 0FFh
 xor	 ebp, [Td3+edi*4]
 mov	 ebx, [Td0+ebx*4]
 shr	 eax, 18h
 xor	 ebx, [Td1+edx*4]
 xor	 ebx, [Td2+esi*4]
 mov	 esi, ecx
 xor	 ebx, [Td3+eax*4]
 xor	 ebp, RK_15
 xor	 ebx, RK_16
 movzx	 eax, cl
 shr	 esi, 8
 and	 esi, 0FFh
 mov	 edi, [Td0+eax*4]
 mov	 eax, ebx
 shr	 eax, 8
 movzx	 eax, al
 xor	 edi, [Td1+eax*4]
 mov	 eax, ebp
 shr	 eax, 10h
 movzx	 eax, al
 xor	 edi, [Td2+eax*4]
 mov	 eax, [esp+8]
 mov	 edx, eax
 shr	 edx, 18h
 xor	 edi, [Td3+edx*4]
 xor	 edi, RK_17
 movzx	 edx, al
 mov	 edx, [Td0+edx*4]
 xor	 edx, [Td1+esi*4]
 mov	 esi, ebx
 shr	 esi, 10h
 and	 esi, 0FFh
 xor	 edx, [Td2+esi*4]
 mov	 esi, ebp
 shr	 esi, 18h
 xor	 edx, [Td3+esi*4]
 xor	 edx, RK_18
 mov	 [esp+4], edx
 mov	 edx, ebp
 and	 edx, 0FFh
 mov	 esi, [Td0+edx*4]
 mov	 edx, eax
 shr	 edx, 8
 movzx	 edx, dl
 xor	 esi, [Td1+edx*4]
 mov	 edx, ecx
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 esi, [Td2+edx*4]
 mov	 edx, ebx
 shr	 edx, 18h
 movzx	 ebx, bl
 shr	 ebp, 8
 xor	 esi, [Td3+edx*4]
 mov	 edx, [Td0+ebx*4]
 and	 ebp, 0FFh
 shr	 eax, 10h
 xor	 edx, [Td1+ebp*4]
 mov	 ebp, edi
 xor	 esi, RK_19
 movzx	 eax, al
 shr	 ecx, 18h
 xor	 edx, [Td2+eax*4]
 xor	 edx, [Td3+ecx*4]
 mov	 ecx, [esp+4]
 xor	 edx, RK_20
 mov	 eax, edi
 and	 eax, 0FFh
 shr	 ebp, 8
 mov	 ebx, [Td0+eax*4]
 mov	 eax, edx
 shr	 eax, 8
 movzx	 eax, al
 and	 ebp, 0FFh
 xor	 ebx, [Td1+eax*4]
 mov	 eax, esi
 shr	 eax, 10h
 movzx	 eax, al
 xor	 ebx, [Td2+eax*4]
 mov	 eax, ecx
 shr	 eax, 18h
 xor	 ebx, [Td3+eax*4]
 xor	 ebx, RK_21
 movzx	 eax, cl
 mov	 eax, [Td0+eax*4]
 xor	 eax, [Td1+ebp*4]
 mov	 ebp, edx
 shr	 ebp, 10h
 and	 ebp, 0FFh
 xor	 eax, [Td2+ebp*4]
 mov	 ebp, esi
 shr	 ebp, 18h
 xor	 eax, [Td3+ebp*4]
 mov	 ebp, ecx
 xor	 eax, RK_22
 shr	 ebp, 8
 and	 ebp, 0FFh
 mov	 [esp+0Ch], eax
 mov	 eax, esi
 and	 eax, 0FFh
 mov	 eax, [Td0+eax*4]
 shr	 esi, 8
 and	 esi, 0FFh
 xor	 eax, [Td1+ebp*4]
 mov	 ebp, edi
 shr	 ebp, 10h
 and	 ebp, 0FFh
 shr	 ecx, 10h
 xor	 eax, [Td2+ebp*4]
 mov	 ebp, edx
 shr	 ebp, 18h
 movzx	 edx, dl
 movzx	 ecx, cl
 xor	 eax, [Td3+ebp*4]
 mov	 ebp, [Td0+edx*4]
 shr	 edi, 18h
 movzx	 edx, bl
 xor	 ebp, [Td1+esi*4]
 xor	 ebp, [Td2+ecx*4]
 xor	 ebp, [Td3+edi*4]
 mov	 edi, ebx
 shr	 edi, 8
 and	 edi, 0FFh
 mov	 edx, [Td0+edx*4]
 mov	 esi, [esp+0Ch]
 xor	 eax, RK_23
 xor	 ebp, RK_24
 mov	 ecx, ebp
 shr	 ecx, 8
 movzx	 ecx, cl
 xor	 edx, [Td1+ecx*4]
 mov	 ecx, eax
 shr	 ecx, 10h
 movzx	 ecx, cl
 xor	 edx, [Td2+ecx*4]
 mov	 ecx, esi
 shr	 ecx, 18h
 xor	 edx, [Td3+ecx*4]
 mov	 ecx, esi
 and	 ecx, 0FFh
 mov	 ecx, [Td0+ecx*4]
 xor	 ecx, [Td1+edi*4]
 mov	 edi, ebp
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ecx, [Td2+edi*4]
 mov	 edi, eax
 xor	 edx, RK_25
 shr	 edi, 18h
 xor	 ecx, [Td3+edi*4]
 mov	 edi, esi
 mov	 [esp+8], edx
 shr	 edi, 8
 and	 edi, 0FFh
 xor	 ecx, RK_26
 mov	 [esp+10h], ecx
 movzx	 ecx, al
 shr	 eax, 8
 mov	 ecx, [Td0+ecx*4]
 xor	 ecx, [Td1+edi*4]
 mov	 edi, ebx
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ecx, [Td2+edi*4]
 mov	 edi, ebp
 shr	 edi, 18h
 and	 ebp, 0FFh
 movzx	 eax, al
 xor	 ecx, [Td3+edi*4]
 mov	 ebp, [Td0+ebp*4]
 shr	 esi, 10h
 and	 esi, 0FFh
 xor	 ebp, [Td1+eax*4]
 xor	 ebp, [Td2+esi*4]
 mov	 esi, [esp+10h]
 xor	 ecx, RK_27
 shr	 ebx, 18h
 movzx	 eax, dl
 xor	 ebp, [Td3+ebx*4]
 mov	 edi, esi
 mov	 eax, [Td0+eax*4]
 shr	 edi, 8
 and	 edi, 0FFh
 xor	 ebp, RK_28
 mov	 ebx, ebp
 shr	 ebx, 8
 movzx	 ebx, bl
 xor	 eax, [Td1+ebx*4]
 mov	 ebx, ecx
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 eax, [Td2+ebx*4]
 mov	 ebx, esi
 shr	 ebx, 18h
 xor	 eax, [Td3+ebx*4]
 xor	 eax, RK_29
 mov	 [esp+4], eax
 mov	 eax, esi
 and	 eax, 0FFh
 mov	 ebx, [Td0+eax*4]
 mov	 eax, edx
 shr	 eax, 8
 movzx	 eax, al
 xor	 ebx, [Td1+eax*4]
 mov	 eax, ebp
 shr	 eax, 10h
 movzx	 eax, al
 xor	 ebx, [Td2+eax*4]
 mov	 eax, ecx
 shr	 eax, 18h
 shr	 edx, 10h
 xor	 ebx, [Td3+eax*4]
 xor	 ebx, RK_30
 movzx	 eax, cl
 mov	 eax, [Td0+eax*4]
 xor	 eax, [Td1+edi*4]
 movzx	 edx, dl
 shr	 ecx, 8
 xor	 eax, [Td2+edx*4]
 mov	 edx, ebp
 shr	 edx, 18h
 and	 ebp, 0FFh
 movzx	 ecx, cl
 xor	 eax, [Td3+edx*4]
 mov	 ebp, [Td0+ebp*4]
 xor	 eax, RK_31
 xor	 ebp, [Td1+ecx*4]
 mov	 edx, [esp+8]
 shr	 esi, 10h
 and	 esi, 0FFh
 shr	 edx, 18h
 xor	 ebp, [Td2+esi*4]
 xor	 ebp, [Td3+edx*4]
 mov	 esi, [esp+4]
 xor	 ebp, RK_32
 mov	 edx, esi
 and	 edx, 0FFh
 mov	 ecx, ebp
 mov	 edx, [Td0+edx*4]
 shr	 ecx, 8
 movzx	 ecx, cl
 xor	 edx, [Td1+ecx*4]
 mov	 ecx, eax
 shr	 ecx, 10h
 movzx	 ecx, cl
 xor	 edx, [Td2+ecx*4]
 mov	 ecx, ebx
 shr	 ecx, 18h
 xor	 edx, [Td3+ecx*4]
 mov	 edi, esi
 movzx	 ecx, bl
 mov	 ecx, [Td0+ecx*4]
 xor	 edx, RK_33
 shr	 edi, 8
 and	 edi, 0FFh
 xor	 ecx, [Td1+edi*4]
 mov	 edi, ebp
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ecx, [Td2+edi*4]
 mov	 edi, eax
 shr	 edi, 18h
 xor	 ecx, [Td3+edi*4]
 mov	 edi, ebx
 xor	 ecx, RK_34
 shr	 edi, 8
 and	 edi, 0FFh
 mov	 [esp+10h], ecx
 movzx	 ecx, al
 mov	 ecx, [Td0+ecx*4]
 shr	 eax, 8
 movzx	 eax, al
 xor	 ecx, [Td1+edi*4]
 mov	 edi, esi
 shr	 edi, 10h
 and	 edi, 0FFh
 shr	 ebx, 10h
 xor	 ecx, [Td2+edi*4]
 mov	 edi, ebp
 shr	 edi, 18h
 and	 ebp, 0FFh
 movzx	 ebx, bl
 xor	 ecx, [Td3+edi*4]
 mov	 edi, edx
 mov	 ebp, [Td0+ebp*4]
 shr	 esi, 18h
 shr	 edi, 8
 xor	 ebp, [Td1+eax*4]
 xor	 ebp, [Td2+ebx*4]
 xor	 ebp, [Td3+esi*4]
 mov	 esi, [esp+10h]
 xor	 ecx, RK_35
 xor	 ebp, RK_36
 movzx	 eax, dl
 and	 edi, 0FFh
 mov	 ebx, [Td0+eax*4]
 mov	 eax, ebp
 shr	 eax, 8
 movzx	 eax, al
 xor	 ebx, [Td1+eax*4]
 mov	 eax, ecx
 shr	 eax, 10h
 movzx	 eax, al
 xor	 ebx, [Td2+eax*4]
 mov	 eax, esi
 shr	 eax, 18h
 xor	 ebx, [Td3+eax*4]
 xor	 ebx, RK_37
 mov	 eax, esi
 and	 eax, 0FFh
 mov	 eax, [Td0+eax*4]
 xor	 eax, [Td1+edi*4]
 mov	 edi, ebp
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 eax, [Td2+edi*4]
 mov	 edi, ecx
 shr	 edi, 18h
 xor	 eax, [Td3+edi*4]
 mov	 edi, esi
 xor	 eax, RK_38
 shr	 edi, 8
 and	 edi, 0FFh
 mov	 [esp+0Ch], eax
 movzx	 eax, cl
 mov	 eax, [Td0+eax*4]
 shr	 ecx, 8
 movzx	 ecx, cl
 xor	 eax, [Td1+edi*4]
 mov	 edi, edx
 shr	 edi, 10h
 and	 edi, 0FFh
 shr	 esi, 10h
 xor	 eax, [Td2+edi*4]
 mov	 edi, ebp
 shr	 edi, 18h
 and	 ebp, 0FFh
 and	 esi, 0FFh
 xor	 eax, [Td3+edi*4]
 mov	 edi, [Td0+ebp*4]
 shr	 edx, 18h
 xor	 edi, [Td1+ecx*4]
 xor	 edi, [Td2+esi*4]
 mov	 esi, ebx
 xor	 edi, [Td3+edx*4]
 mov	 ecx, [esp+0Ch]
 xor	 eax, RK_39
 xor	 edi, RK_40
 movzx	 edx, bl
 shr	 esi, 8
 mov	 ebp, [Td0+edx*4]
 mov	 edx, edi
 shr	 edx, 8
 movzx	 edx, dl
 and	 esi, 0FFh
 xor	 ebp, [Td1+edx*4]
 mov	 edx, eax
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 ebp, [Td2+edx*4]
 mov	 edx, ecx
 shr	 edx, 18h
 xor	 ebp, [Td3+edx*4]
 xor	 ebp, RK_41
 movzx	 edx, cl
 mov	 edx, [Td0+edx*4]
 xor	 edx, [Td1+esi*4]
 mov	 esi, edi
 shr	 esi, 10h
 and	 esi, 0FFh
 xor	 edx, [Td2+esi*4]
 mov	 esi, eax
 shr	 esi, 18h
 xor	 edx, [Td3+esi*4]
 xor	 edx, RK_42
 mov	 [esp+10h], edx
 movzx	 edx, al
 mov	 esi, [Td0+edx*4]
 mov	 edx, ecx
 shr	 edx, 8
 movzx	 edx, dl
 xor	 esi, [Td1+edx*4]
 mov	 edx, ebx
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 esi, [Td2+edx*4]
 mov	 edx, edi
 shr	 edx, 18h
 and	 edi, 0FFh
 shr	 eax, 8
 xor	 esi, [Td3+edx*4]
 mov	 edx, [Td0+edi*4]
 movzx	 eax, al
 shr	 ecx, 10h
 xor	 edx, [Td1+eax*4]
 xor	 esi, RK_43
 movzx	 ecx, cl
 xor	 edx, [Td2+ecx*4]
 mov	 ecx, [esp+10h]
 shr	 ebx, 18h
 mov	 eax, ebp
 and	 eax, 0FFh
 xor	 edx, [Td3+ebx*4]
 mov	 ebx, ebp
 mov	 edi, [Td0+eax*4]
 shr	 ebx, 8
 movzx	 ebx, bl
 xor	 edx, RK_44
 mov	 eax, edx
 shr	 eax, 8
 movzx	 eax, al
 xor	 edi, [Td1+eax*4]
 mov	 eax, esi
 shr	 eax, 10h
 movzx	 eax, al
 xor	 edi, [Td2+eax*4]
 mov	 eax, ecx
 shr	 eax, 18h
 xor	 edi, [Td3+eax*4]
 xor	 edi, RK_45
 movzx	 eax, cl
 mov	 eax, [Td0+eax*4]
 xor	 eax, [Td1+ebx*4]
 mov	 ebx, edx
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 eax, [Td2+ebx*4]
 mov	 ebx, esi
 shr	 ebx, 18h
 xor	 eax, [Td3+ebx*4]
 mov	 ebx, ecx
 xor	 eax, RK_46
 shr	 ebx, 8
 movzx	 ebx, bl
 mov	 [esp+0Ch], eax
 mov	 eax, esi
 and	 eax, 0FFh
 mov	 eax, [Td0+eax*4]
 shr	 esi, 8
 and	 esi, 0FFh
 xor	 eax, [Td1+ebx*4]
 mov	 ebx, ebp
 shr	 ebx, 10h
 movzx	 ebx, bl
 shr	 ecx, 10h
 xor	 eax, [Td2+ebx*4]
 mov	 ebx, edx
 shr	 ebx, 18h
 movzx	 edx, dl
 movzx	 ecx, cl
 xor	 eax, [Td3+ebx*4]
 mov	 ebx, [Td0+edx*4]
 shr	 ebp, 18h
 mov	 edx, edi
 and	 edx, 0FFh
 xor	 ebx, [Td1+esi*4]
 mov	 esi, edi
 mov	 edx, [Td0+edx*4]
 shr	 esi, 8
 and	 esi, 0FFh
 xor	 ebx, [Td2+ecx*4]
 xor	 ebx, [Td3+ebp*4]
 mov	 ebp, [esp+0Ch]
 xor	 eax, RK_47
 xor	 ebx, RK_48
 mov	 ecx, ebx
 shr	 ecx, 8
 movzx	 ecx, cl
 xor	 edx, [Td1+ecx*4]
 mov	 ecx, eax
 shr	 ecx, 10h
 movzx	 ecx, cl
 xor	 edx, [Td2+ecx*4]
 mov	 ecx, ebp
 shr	 ecx, 18h
 xor	 edx, [Td3+ecx*4]
 mov	 ecx, ebp
 and	 ecx, 0FFh
 mov	 ecx, [Td0+ecx*4]
 xor	 ecx, [Td1+esi*4]
 mov	 esi, ebx
 shr	 esi, 10h
 and	 esi, 0FFh
 xor	 ecx, [Td2+esi*4]
 mov	 esi, eax
 xor	 edx, RK_49
 shr	 esi, 18h
 xor	 ecx, [Td3+esi*4]
 mov	 esi, ebp
 xor	 ecx, RK_50
 shr	 esi, 8
 and	 esi, 0FFh
 mov	 [esp+10h], ecx
 movzx	 ecx, al
 mov	 ecx, [Td0+ecx*4]
 shr	 eax, 8
 movzx	 eax, al
 xor	 ecx, [Td1+esi*4]
 mov	 esi, edi
 shr	 esi, 10h
 and	 esi, 0FFh
 shr	 ebp, 10h
 xor	 ecx, [Td2+esi*4]
 mov	 esi, ebx
 shr	 esi, 18h
 movzx	 ebx, bl
 and	 ebp, 0FFh
 xor	 ecx, [Td3+esi*4]
 mov	 esi, [Td0+ebx*4]
 xor	 ecx, RK_51
 mov	 ebx, edx
 xor	 esi, [Td1+eax*4]
 shr	 edi, 18h
 movzx	 eax, dl
 xor	 esi, [Td2+ebp*4]
 xor	 esi, [Td3+edi*4]
 mov	 ebp, [Td0+eax*4]
 mov	 edi, [esp+10h]
 xor	 esi, RK_52
 mov	 eax, esi
 shr	 eax, 8
 movzx	 eax, al
 xor	 ebp, [Td1+eax*4]
 mov	 eax, ecx
 shr	 eax, 10h
 movzx	 eax, al
 xor	 ebp, [Td2+eax*4]
 mov	 eax, edi
 shr	 eax, 18h
 shr	 ebx, 8
 movzx	 ebx, bl
 xor	 ebp, [Td3+eax*4]
 xor	 ebp, RK_53
 mov	 eax, edi
 and	 eax, 0FFh
 mov	 eax, [Td0+eax*4]
 xor	 eax, [Td1+ebx*4]
 mov	 ebx, esi
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 eax, [Td2+ebx*4]
 mov	 ebx, ecx
 shr	 ebx, 18h
 xor	 eax, [Td3+ebx*4]
 xor	 eax, RK_54
 mov	 [esp+0Ch], eax
 movzx	 eax, cl
 mov	 ebx, [Td0+eax*4]
 mov	 eax, edi
 shr	 eax, 8
 movzx	 eax, al
 xor	 ebx, [Td1+eax*4]
 mov	 eax, edx
 shr	 eax, 10h
 movzx	 eax, al
 xor	 ebx, [Td2+eax*4]
 mov	 eax, esi
 shr	 eax, 18h
 and	 esi, 0FFh
 shr	 ecx, 8
 xor	 ebx, [Td3+eax*4]
 mov	 eax, [Td0+esi*4]
 movzx	 ecx, cl
 shr	 edi, 10h
 xor	 eax, [Td1+ecx*4]
 xor	 ebx, RK_55
 and	 edi, 0FFh
 xor	 eax, [Td2+edi*4]
 shr	 edx, 18h
 mov	 edi, ebp
 shr	 edi, 8
 xor	 eax, [Td3+edx*4]
 xor	 eax, RK_56
 mov	 edx, ebp
 and	 edx, 0FFh
 mov	 esi, [Td4_1+edx*4]
 mov	 edx, eax
 shr	 edx, 8
 movzx	 edx, dl
 and	 edi, 0FFh
 xor	 esi, [Td4_2+edx*4]
 mov	 edx, ebx
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 esi, [Td4_3+edx*4]
 mov	 edx, [esp+0Ch]
 mov	 ecx, edx
 shr	 ecx, 18h
 xor	 esi, [Td4_4+ecx*4]
 mov	 ecx, [esp]
 xor	 esi, RK_57
 mov	 [ecx], esi
 movzx	 esi, dl
 mov	 esi, [Td4_1+esi*4]
 xor	 esi, [Td4_2+edi*4]
 mov	 edi, eax
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 esi, [Td4_3+edi*4]
 mov	 edi, ebx
 shr	 edi, 18h
 xor	 esi, [Td4_4+edi*4]
 mov	 edi, edx
 shr	 edi, 8
 xor	 esi, RK_58
 mov	 [ecx+4], esi
 movzx	 esi, bl
 and	 edi, 0FFh
 shr	 ebx, 8
 mov	 esi, [Td4_1+esi*4]
 xor	 esi, [Td4_2+edi*4]
 mov	 edi, ebp
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 esi, [Td4_3+edi*4]
 mov	 edi, eax
 shr	 edi, 18h
 movzx	 eax, al
 movzx	 ebx, bl
 xor	 esi, [Td4_4+edi*4]
 mov	 eax, [Td4_1+eax*4]
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 eax, [Td4_2+ebx*4]
 xor	 eax, [Td4_3+edx*4]
 xor	 esi, RK_59
 mov	 [ecx+8], esi
 mov	 edx, ecx
 shr	 ebp, 18h
 xor	 eax, [Td4_4+ebp*4]
 xor	 eax, RK_60
 mov	 [edx+0Ch], eax
 add	 esp, 14h
 pop	 ebx
 pop	 ebp
 pop	 esi
 pop	 edi
 ret
 align 4
aes_dec_size = $-aes_dec_begin

aes_enc_begin:
 push	 edi
 push	 esi
 push	 ebp
 push	 ebx
 sub	 esp, 14h
 mov	 [esp], edx
 mov	 ebx, [ecx]
 xor	 ebx, RK_1
 mov	 eax, [ecx+4]
 xor	 eax, RK_2
 mov	 edx, [ecx+8]
 xor	 edx, RK_3
 mov	 edi, [ecx+0Ch]
 xor	 edi, RK_4
 movzx	 ecx, bl
 mov	 esi, [Te0+ecx*4]
 mov	 ecx, eax
 shr	 ecx, 8
 movzx	 ecx, cl
 mov	 ebp, edx
 shr	 ebp, 8
 xor	 esi, [Te1+ecx*4]
 mov	 ecx, edx
 shr	 ecx, 10h
 movzx	 ecx, cl
 and	 ebp, 0FFh
 xor	 esi, [Te2+ecx*4]
 mov	 ecx, edi
 shr	 ecx, 18h
 xor	 esi, [Te3+ecx*4]
 xor	 esi, RK_5
 movzx	 ecx, al
 mov	 ecx, [Te0+ecx*4]
 xor	 ecx, [Te1+ebp*4]
 mov	 ebp, edi
 shr	 ebp, 10h
 and	 ebp, 0FFh
 xor	 ecx, [Te2+ebp*4]
 mov	 ebp, ebx
 shr	 ebp, 18h
 xor	 ecx, [Te3+ebp*4]
 xor	 ecx, RK_6
 mov	 [esp+8], ecx
 movzx	 ecx, dl
 mov	 ebp, [Te0+ecx*4]
 mov	 ecx, edi
 shr	 ecx, 8
 movzx	 ecx, cl
 xor	 ebp, [Te1+ecx*4]
 mov	 ecx, ebx
 shr	 ecx, 10h
 movzx	 ecx, cl
 xor	 ebp, [Te2+ecx*4]
 mov	 ecx, eax
 shr	 ecx, 18h
 and	 edi, 0FFh
 shr	 ebx, 8
 xor	 ebp, [Te3+ecx*4]
 mov	 ecx, [Te0+edi*4]
 movzx	 ebx, bl
 shr	 eax, 10h
 xor	 ecx, [Te1+ebx*4]
 mov	 edi, [esp+8]
 movzx	 eax, al
 shr	 edx, 18h
 xor	 ecx, [Te2+eax*4]
 xor	 ecx, [Te3+edx*4]
 xor	 ebp, RK_7
 mov	 ebx, ebp
 xor	 ecx, RK_8
 mov	 eax, esi
 and	 eax, 0FFh
 shr	 ebx, 8
 mov	 edx, [Te0+eax*4]
 mov	 eax, edi
 shr	 eax, 8
 movzx	 eax, al
 movzx	 ebx, bl
 xor	 edx, [Te1+eax*4]
 mov	 eax, ebp
 shr	 eax, 10h
 movzx	 eax, al
 xor	 edx, [Te2+eax*4]
 mov	 eax, ecx
 shr	 eax, 18h
 xor	 edx, [Te3+eax*4]
 xor	 edx, RK_9
 mov	 eax, edi
 and	 eax, 0FFh
 mov	 eax, [Te0+eax*4]
 xor	 eax, [Te1+ebx*4]
 mov	 ebx, ecx
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 eax, [Te2+ebx*4]
 mov	 ebx, esi
 shr	 ebx, 18h
 xor	 eax, [Te3+ebx*4]
 mov	 ebx, ecx
 xor	 eax, RK_10
 shr	 ebx, 8
 movzx	 ebx, bl
 mov	 [esp+4], eax
 mov	 eax, ebp
 and	 eax, 0FFh
 mov	 eax, [Te0+eax*4]
 movzx	 ecx, cl
 shr	 ebp, 18h
 xor	 eax, [Te1+ebx*4]
 mov	 ebx, esi
 shr	 ebx, 10h
 movzx	 ebx, bl
 shr	 esi, 8
 xor	 eax, [Te2+ebx*4]
 mov	 ebx, edi
 shr	 ebx, 18h
 and	 esi, 0FFh
 shr	 edi, 10h
 xor	 eax, [Te3+ebx*4]
 mov	 ebx, [Te0+ecx*4]
 and	 edi, 0FFh
 movzx	 ecx, dl
 xor	 ebx, [Te1+esi*4]
 xor	 ebx, [Te2+edi*4]
 xor	 ebx, [Te3+ebp*4]
 mov	 ebp, [Te0+ecx*4]
 mov	 esi, [esp+4]
 xor	 eax, RK_11
 mov	 ecx, esi
 xor	 ebx, RK_12
 shr	 ecx, 8
 movzx	 ecx, cl
 xor	 ebp, [Te1+ecx*4]
 mov	 ecx, eax
 shr	 ecx, 10h
 movzx	 ecx, cl
 mov	 edi, eax
 xor	 ebp, [Te2+ecx*4]
 mov	 ecx, ebx
 shr	 ecx, 18h
 shr	 edi, 8
 and	 edi, 0FFh
 xor	 ebp, [Te3+ecx*4]
 xor	 ebp, RK_13
 mov	 ecx, esi
 and	 ecx, 0FFh
 mov	 ecx, [Te0+ecx*4]
 xor	 ecx, [Te1+edi*4]
 mov	 edi, ebx
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ecx, [Te2+edi*4]
 mov	 edi, edx
 shr	 edi, 18h
 xor	 ecx, [Te3+edi*4]
 mov	 edi, ebx
 xor	 ecx, RK_14
 shr	 edi, 8
 and	 edi, 0FFh
 mov	 [esp+8], ecx
 movzx	 ecx, al
 mov	 ecx, [Te0+ecx*4]
 movzx	 ebx, bl
 shr	 eax, 18h
 xor	 ecx, [Te1+edi*4]
 mov	 ebx, [Te0+ebx*4]
 mov	 edi, edx
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ecx, [Te2+edi*4]
 mov	 edi, esi
 shr	 edi, 18h
 shr	 edx, 8
 xor	 ecx, [Te3+edi*4]
 xor	 ecx, RK_15
 movzx	 edx, dl
 xor	 ebx, [Te1+edx*4]
 shr	 esi, 10h
 and	 esi, 0FFh
 mov	 edi, ecx
 xor	 ebx, [Te2+esi*4]
 xor	 ebx, [Te3+eax*4]
 xor	 ebx, RK_16
 mov	 eax, ebp
 and	 eax, 0FFh
 shr	 edi, 8
 and	 edi, 0FFh
 mov	 esi, [Te0+eax*4]
 mov	 eax, [esp+8]
 mov	 edx, eax
 shr	 edx, 8
 movzx	 edx, dl
 xor	 esi, [Te1+edx*4]
 mov	 edx, ecx
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 esi, [Te2+edx*4]
 mov	 edx, ebx
 shr	 edx, 18h
 xor	 esi, [Te3+edx*4]
 xor	 esi, RK_17
 movzx	 edx, al
 mov	 edx, [Te0+edx*4]
 xor	 edx, [Te1+edi*4]
 mov	 edi, ebx
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 edx, [Te2+edi*4]
 mov	 edi, ebp
 shr	 edi, 18h
 xor	 edx, [Te3+edi*4]
 xor	 edx, RK_18
 mov	 [esp+4], edx
 movzx	 edx, cl
 mov	 edi, [Te0+edx*4]
 mov	 edx, ebx
 shr	 edx, 8
 movzx	 edx, dl
 xor	 edi, [Te1+edx*4]
 mov	 edx, ebp
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 edi, [Te2+edx*4]
 mov	 edx, eax
 shr	 edx, 18h
 movzx	 ebx, bl
 shr	 ebp, 8
 xor	 edi, [Te3+edx*4]
 mov	 edx, [Te0+ebx*4]
 and	 ebp, 0FFh
 shr	 eax, 10h
 xor	 edx, [Te1+ebp*4]
 xor	 edi, RK_19
 movzx	 eax, al
 xor	 edx, [Te2+eax*4]
 shr	 ecx, 18h
 mov	 eax, esi
 and	 eax, 0FFh
 mov	 ebp, edi
 xor	 edx, [Te3+ecx*4]
 mov	 eax, [Te0+eax*4]
 shr	 ebp, 8
 and	 ebp, 0FFh
 mov	 ecx, [esp+4]
 xor	 edx, RK_20
 mov	 ebx, ecx
 shr	 ebx, 8
 movzx	 ebx, bl
 xor	 eax, [Te1+ebx*4]
 mov	 ebx, edi
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 eax, [Te2+ebx*4]
 mov	 ebx, edx
 shr	 ebx, 18h
 xor	 eax, [Te3+ebx*4]
 xor	 eax, RK_21
 movzx	 ebx, cl
 mov	 ebx, [Te0+ebx*4]
 xor	 ebx, [Te1+ebp*4]
 mov	 ebp, edx
 shr	 ebp, 10h
 and	 ebp, 0FFh
 xor	 ebx, [Te2+ebp*4]
 mov	 ebp, esi
 shr	 ebp, 18h
 xor	 ebx, [Te3+ebp*4]
 mov	 ebp, edx
 xor	 ebx, RK_22
 shr	 ebp, 8
 and	 ebp, 0FFh
 mov	 [esp+0Ch], ebx
 mov	 ebx, edi
 and	 ebx, 0FFh
 mov	 ebx, [Te0+ebx*4]
 movzx	 edx, dl
 shr	 edi, 18h
 xor	 ebx, [Te1+ebp*4]
 mov	 ebp, esi
 shr	 ebp, 10h
 and	 ebp, 0FFh
 shr	 esi, 8
 xor	 ebx, [Te2+ebp*4]
 mov	 ebp, ecx
 shr	 ebp, 18h
 and	 esi, 0FFh
 shr	 ecx, 10h
 xor	 ebx, [Te3+ebp*4]
 mov	 ebp, [Te0+edx*4]
 movzx	 ecx, cl
 movzx	 edx, al
 xor	 ebp, [Te1+esi*4]
 xor	 ebp, [Te2+ecx*4]
 xor	 ebp, [Te3+edi*4]
 mov	 ecx, [Te0+edx*4]
 mov	 esi, [esp+0Ch]
 xor	 ebx, RK_23
 mov	 edx, esi
 xor	 ebp, RK_24
 shr	 edx, 8
 movzx	 edx, dl
 xor	 ecx, [Te1+edx*4]
 mov	 edx, ebx
 shr	 edx, 10h
 movzx	 edx, dl
 mov	 edi, ebx
 xor	 ecx, [Te2+edx*4]
 mov	 edx, ebp
 shr	 edx, 18h
 shr	 edi, 8
 and	 edi, 0FFh
 xor	 ecx, [Te3+edx*4]
 xor	 ecx, RK_25
 mov	 edx, esi
 and	 edx, 0FFh
 mov	 edx, [Te0+edx*4]
 xor	 edx, [Te1+edi*4]
 mov	 edi, ebp
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 edx, [Te2+edi*4]
 mov	 edi, eax
 shr	 edi, 18h
 xor	 edx, [Te3+edi*4]
 mov	 edi, ebp
 xor	 edx, RK_26
 shr	 edi, 8
 and	 edi, 0FFh
 mov	 [esp+10h], edx
 movzx	 edx, bl
 mov	 edx, [Te0+edx*4]
 and	 ebp, 0FFh
 shr	 ebx, 18h
 xor	 edx, [Te1+edi*4]
 mov	 ebp, [Te0+ebp*4]
 mov	 edi, eax
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 edx, [Te2+edi*4]
 mov	 edi, esi
 shr	 edi, 18h
 shr	 eax, 8
 xor	 edx, [Te3+edi*4]
 xor	 edx, RK_27
 mov	 edi, edx
 movzx	 eax, al
 xor	 ebp, [Te1+eax*4]
 mov	 [esp+8], edx
 shr	 esi, 10h
 and	 esi, 0FFh
 xor	 ebp, [Te2+esi*4]
 mov	 esi, [esp+10h]
 xor	 ebp, [Te3+ebx*4]
 mov	 ebx, esi
 xor	 ebp, RK_28
 movzx	 eax, cl
 shr	 ebx, 8
 mov	 eax, [Te0+eax*4]
 movzx	 ebx, bl
 xor	 eax, [Te1+ebx*4]
 mov	 ebx, edx
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 eax, [Te2+ebx*4]
 mov	 ebx, ebp
 shr	 ebx, 18h
 shr	 edi, 8
 xor	 eax, [Te3+ebx*4]
 xor	 eax, RK_29
 mov	 ebx, esi
 and	 ebx, 0FFh
 mov	 ebx, [Te0+ebx*4]
 and	 edi, 0FFh
 xor	 ebx, [Te1+edi*4]
 mov	 edi, ebp
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ebx, [Te2+edi*4]
 mov	 edi, ecx
 shr	 edi, 18h
 movzx	 edx, dl
 xor	 ebx, [Te3+edi*4]
 mov	 edi, ebp
 mov	 edx, [Te0+edx*4]
 shr	 edi, 8
 and	 edi, 0FFh
 xor	 edx, [Te1+edi*4]
 mov	 edi, ecx
 xor	 ebx, RK_30
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 edx, [Te2+edi*4]
 mov	 edi, esi
 shr	 edi, 18h
 and	 ebp, 0FFh
 shr	 ecx, 8
 xor	 edx, [Te3+edi*4]
 mov	 ebp, [Te0+ebp*4]
 movzx	 ecx, cl
 xor	 ebp, [Te1+ecx*4]
 xor	 edx, RK_31
 mov	 [esp+4], edx
 mov	 edx, [esp+8]
 shr	 esi, 10h
 and	 esi, 0FFh
 xor	 ebp, [Te2+esi*4]
 mov	 esi, [esp+4]
 shr	 edx, 18h
 xor	 ebp, [Te3+edx*4]
 mov	 ecx, ebx
 xor	 ebp, RK_32
 movzx	 edx, al
 mov	 edx, [Te0+edx*4]
 shr	 ecx, 8
 movzx	 ecx, cl
 xor	 edx, [Te1+ecx*4]
 mov	 ecx, esi
 shr	 ecx, 10h
 movzx	 ecx, cl
 mov	 edi, esi
 xor	 edx, [Te2+ecx*4]
 mov	 ecx, ebp
 shr	 ecx, 18h
 shr	 edi, 8
 and	 edi, 0FFh
 xor	 edx, [Te3+ecx*4]
 xor	 edx, RK_33
 movzx	 ecx, bl
 mov	 ecx, [Te0+ecx*4]
 xor	 ecx, [Te1+edi*4]
 mov	 edi, ebp
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ecx, [Te2+edi*4]
 mov	 edi, eax
 shr	 edi, 18h
 xor	 ecx, [Te3+edi*4]
 mov	 edi, ebp
 xor	 ecx, RK_34
 shr	 edi, 8
 and	 edi, 0FFh
 mov	 [esp+10h], ecx
 mov	 ecx, esi
 and	 ecx, 0FFh
 mov	 ecx, [Te0+ecx*4]
 and	 ebp, 0FFh
 shr	 esi, 18h
 xor	 ecx, [Te1+edi*4]
 mov	 ebp, [Te0+ebp*4]
 mov	 edi, eax
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ecx, [Te2+edi*4]
 mov	 edi, ebx
 shr	 edi, 18h
 shr	 eax, 8
 xor	 ecx, [Te3+edi*4]
 xor	 ecx, RK_35
 movzx	 eax, al
 xor	 ebp, [Te1+eax*4]
 shr	 ebx, 10h
 movzx	 ebx, bl
 movzx	 eax, dl
 xor	 ebp, [Te2+ebx*4]
 mov	 edi, ecx
 mov	 eax, [Te0+eax*4]
 shr	 edi, 8
 and	 edi, 0FFh
 xor	 ebp, [Te3+esi*4]
 mov	 esi, [esp+10h]
 xor	 ebp, RK_36
 mov	 ebx, esi
 shr	 ebx, 8
 movzx	 ebx, bl
 xor	 eax, [Te1+ebx*4]
 mov	 ebx, ecx
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 eax, [Te2+ebx*4]
 mov	 ebx, ebp
 shr	 ebx, 18h
 xor	 eax, [Te3+ebx*4]
 mov	 ebx, esi
 and	 ebx, 0FFh
 mov	 ebx, [Te0+ebx*4]
 xor	 ebx, [Te1+edi*4]
 mov	 edi, ebp
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ebx, [Te2+edi*4]
 mov	 edi, edx
 xor	 eax, RK_37
 shr	 edi, 18h
 xor	 ebx, [Te3+edi*4]
 mov	 edi, ebp
 xor	 ebx, RK_38
 shr	 edi, 8
 and	 edi, 0FFh
 mov	 [esp+0Ch], ebx
 movzx	 ebx, cl
 mov	 ebx, [Te0+ebx*4]
 and	 ebp, 0FFh
 shr	 ecx, 18h
 xor	 ebx, [Te1+edi*4]
 mov	 edi, edx
 shr	 edi, 10h
 and	 edi, 0FFh
 shr	 edx, 8
 xor	 ebx, [Te2+edi*4]
 mov	 edi, esi
 shr	 edi, 18h
 movzx	 edx, dl
 shr	 esi, 10h
 xor	 ebx, [Te3+edi*4]
 mov	 edi, [Te0+ebp*4]
 and	 esi, 0FFh
 xor	 edi, [Te1+edx*4]
 xor	 edi, [Te2+esi*4]
 xor	 edi, [Te3+ecx*4]
 mov	 ecx, [esp+0Ch]
 xor	 ebx, RK_39
 mov	 ebp, ebx
 xor	 edi, RK_40
 movzx	 edx, al
 shr	 ebp, 8
 and	 ebp, 0FFh
 mov	 esi, [Te0+edx*4]
 mov	 edx, ecx
 shr	 edx, 8
 movzx	 edx, dl
 xor	 esi, [Te1+edx*4]
 mov	 edx, ebx
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 esi, [Te2+edx*4]
 mov	 edx, edi
 shr	 edx, 18h
 xor	 esi, [Te3+edx*4]
 xor	 esi, RK_41
 movzx	 edx, cl
 mov	 edx, [Te0+edx*4]
 xor	 edx, [Te1+ebp*4]
 mov	 ebp, edi
 shr	 ebp, 10h
 and	 ebp, 0FFh
 xor	 edx, [Te2+ebp*4]
 mov	 ebp, eax
 shr	 ebp, 18h
 xor	 edx, [Te3+ebp*4]
 xor	 edx, RK_42
 mov	 [esp+10h], edx
 movzx	 edx, bl
 mov	 ebp, [Te0+edx*4]
 mov	 edx, edi
 shr	 edx, 8
 movzx	 edx, dl
 xor	 ebp, [Te1+edx*4]
 mov	 edx, eax
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 ebp, [Te2+edx*4]
 mov	 edx, ecx
 shr	 edx, 18h
 and	 edi, 0FFh
 shr	 eax, 8
 xor	 ebp, [Te3+edx*4]
 mov	 edx, [Te0+edi*4]
 movzx	 eax, al
 shr	 ecx, 10h
 xor	 edx, [Te1+eax*4]
 xor	 ebp, RK_43
 movzx	 ecx, cl
 xor	 edx, [Te2+ecx*4]
 mov	 ecx, [esp+10h]
 shr	 ebx, 18h
 mov	 eax, esi
 and	 eax, 0FFh
 xor	 edx, [Te3+ebx*4]
 mov	 ebx, ecx
 xor	 edx, RK_44
 shr	 ebx, 8
 movzx	 ebx, bl
 mov	 eax, [Te0+eax*4]
 xor	 eax, [Te1+ebx*4]
 mov	 ebx, ebp
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 eax, [Te2+ebx*4]
 mov	 ebx, edx
 shr	 ebx, 18h
 mov	 edi, ebp
 shr	 edi, 8
 xor	 eax, [Te3+ebx*4]
 xor	 eax, RK_45
 movzx	 ebx, cl
 mov	 ebx, [Te0+ebx*4]
 and	 edi, 0FFh
 xor	 ebx, [Te1+edi*4]
 mov	 edi, edx
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 ebx, [Te2+edi*4]
 mov	 edi, esi
 shr	 edi, 18h
 xor	 ebx, [Te3+edi*4]
 xor	 ebx, RK_46
 mov	 [esp+0Ch], ebx
 mov	 ebx, ebp
 and	 ebx, 0FFh
 mov	 edi, [Te0+ebx*4]
 mov	 ebx, edx
 shr	 ebx, 8
 movzx	 ebx, bl
 xor	 edi, [Te1+ebx*4]
 mov	 ebx, esi
 shr	 ebx, 10h
 movzx	 ebx, bl
 xor	 edi, [Te2+ebx*4]
 mov	 ebx, ecx
 shr	 ebx, 18h
 movzx	 edx, dl
 shr	 esi, 8
 xor	 edi, [Te3+ebx*4]
 mov	 ebx, [Te0+edx*4]
 and	 esi, 0FFh
 shr	 ecx, 10h
 xor	 ebx, [Te1+esi*4]
 xor	 edi, RK_47
 movzx	 ecx, cl
 xor	 ebx, [Te2+ecx*4]
 shr	 ebp, 18h
 movzx	 edx, al
 mov	 esi, edi
 xor	 ebx, [Te3+ebp*4]
 mov	 ecx, [Te0+edx*4]
 shr	 esi, 8
 and	 esi, 0FFh
 mov	 ebp, [esp+0Ch]
 xor	 ebx, RK_48
 mov	 edx, ebp
 shr	 edx, 8
 movzx	 edx, dl
 xor	 ecx, [Te1+edx*4]
 mov	 edx, edi
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 ecx, [Te2+edx*4]
 mov	 edx, ebx
 shr	 edx, 18h
 xor	 ecx, [Te3+edx*4]
 xor	 ecx, RK_49
 mov	 edx, ebp
 and	 edx, 0FFh
 mov	 edx, [Te0+edx*4]
 xor	 edx, [Te1+esi*4]
 mov	 esi, ebx
 shr	 esi, 10h
 and	 esi, 0FFh
 xor	 edx, [Te2+esi*4]
 mov	 esi, eax
 shr	 esi, 18h
 xor	 edx, [Te3+esi*4]
 mov	 esi, ebx
 xor	 edx, RK_50
 shr	 esi, 8
 and	 esi, 0FFh
 mov	 [esp+10h], edx
 mov	 edx, edi
 and	 edx, 0FFh
 mov	 edx, [Te0+edx*4]
 movzx	 ebx, bl
 shr	 edi, 18h
 xor	 edx, [Te1+esi*4]
 mov	 esi, eax
 shr	 esi, 10h
 and	 esi, 0FFh
 shr	 eax, 8
 xor	 edx, [Te2+esi*4]
 mov	 esi, ebp
 shr	 esi, 18h
 movzx	 eax, al
 shr	 ebp, 10h
 xor	 edx, [Te3+esi*4]
 mov	 esi, [Te0+ebx*4]
 and	 ebp, 0FFh
 xor	 esi, [Te1+eax*4]
 xor	 esi, [Te2+ebp*4]
 xor	 esi, [Te3+edi*4]
 mov	 edi, [esp+10h]
 xor	 edx, RK_51
 mov	 ebp, edx
 xor	 esi, RK_52
 movzx	 eax, cl
 shr	 ebp, 8
 and	 ebp, 0FFh
 mov	 ebx, [Te0+eax*4]
 mov	 eax, edi
 shr	 eax, 8
 movzx	 eax, al
 xor	 ebx, [Te1+eax*4]
 mov	 eax, edx
 shr	 eax, 10h
 movzx	 eax, al
 xor	 ebx, [Te2+eax*4]
 mov	 eax, esi
 shr	 eax, 18h
 xor	 ebx, [Te3+eax*4]
 xor	 ebx, RK_53
 mov	 eax, edi
 and	 eax, 0FFh
 mov	 eax, [Te0+eax*4]
 xor	 eax, [Te1+ebp*4]
 mov	 ebp, esi
 shr	 ebp, 10h
 and	 ebp, 0FFh
 xor	 eax, [Te2+ebp*4]
 mov	 ebp, ecx
 shr	 ebp, 18h
 xor	 eax, [Te3+ebp*4]
 xor	 eax, RK_54
 mov	 [esp+0Ch], eax
 movzx	 eax, dl
 mov	 ebp, [Te0+eax*4]
 mov	 eax, esi
 shr	 eax, 8
 movzx	 eax, al
 xor	 ebp, [Te1+eax*4]
 mov	 eax, ecx
 shr	 eax, 10h
 movzx	 eax, al
 xor	 ebp, [Te2+eax*4]
 mov	 eax, edi
 shr	 eax, 18h
 and	 esi, 0FFh
 shr	 ecx, 8
 xor	 ebp, [Te3+eax*4]
 mov	 eax, [Te0+esi*4]
 movzx	 ecx, cl
 shr	 edi, 10h
 xor	 eax, [Te1+ecx*4]
 xor	 ebp, RK_55
 and	 edi, 0FFh
 xor	 eax, [Te2+edi*4]
 shr	 edx, 18h
 mov	 edi, ebp
 shr	 edi, 8
 xor	 eax, [Te3+edx*4]
 xor	 eax, RK_56
 movzx	 edx, bl
 mov	 esi, [Te4_1+edx*4]
 mov	 edx, [esp+0Ch]
 mov	 ecx, edx
 shr	 ecx, 8
 movzx	 ecx, cl
 and	 edi, 0FFh
 xor	 esi, [Te4_2+ecx*4]
 mov	 ecx, ebp
 shr	 ecx, 10h
 movzx	 ecx, cl
 xor	 esi, [Te4_3+ecx*4]
 mov	 ecx, eax
 shr	 ecx, 18h
 xor	 esi, [Te4_4+ecx*4]
 mov	 ecx, [esp]
 xor	 esi, RK_57
 mov	 [ecx], esi
 movzx	 esi, dl
 mov	 esi, [Te4_1+esi*4]
 xor	 esi, [Te4_2+edi*4]
 mov	 edi, eax
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 esi, [Te4_3+edi*4]
 mov	 edi, ebx
 shr	 edi, 18h
 xor	 esi, [Te4_4+edi*4]
 mov	 edi, eax
 shr	 edi, 8
 xor	 esi, RK_58
 mov	 [ecx+4], esi
 mov	 esi, ebp
 and	 esi, 0FFh
 and	 edi, 0FFh
 movzx	 eax, al
 mov	 esi, [Te4_1+esi*4]
 xor	 esi, [Te4_2+edi*4]
 mov	 edi, ebx
 shr	 edi, 10h
 and	 edi, 0FFh
 xor	 esi, [Te4_3+edi*4]
 mov	 edi, edx
 shr	 edi, 18h
 shr	 ebx, 8
 movzx	 ebx, bl
 xor	 esi, [Te4_4+edi*4]
 xor	 esi, RK_59
 mov	 [ecx+8], esi
 mov	 eax, [Te4_1+eax*4]
 xor	 eax, [Te4_2+ebx*4]
 shr	 edx, 10h
 movzx	 edx, dl
 xor	 eax, [Te4_3+edx*4]
 mov	 edx, ecx
 shr	 ebp, 18h
 xor	 eax, [Te4_4+ebp*4]
 xor	 eax, RK_60
 mov	 [edx+0Ch], eax
 add	 esp, 14h
 pop	 ebx
 pop	 ebp
 pop	 esi
 pop	 edi
 ret
 align	 4
aes_enc_size = $-aes_enc_begin



st_fmat db "%0.8x", 0
fl_name db 'aes_x86.txt', 0

make_c_array:
 push	 ebp
 mov	 ebp, esp
 push	 esi
 push	 edi
 push	 ebx
 mov	 edi, [ebp+08h]
 mov	 esi, [ebp+0Ch]
 mov	 ecx, [ebp+10h]
 shr	 ecx, 2
 xor	 ebx, ebx
 mov	 eax, 0A0D0A0Dh
 stosd
 stosd
@@:
 cmp	 ebx, 8
 jnz	 no_crlf
 xor	 ebx, ebx
 mov	 ax, 0A0Dh
 stosw
no_crlf:
 inc	 ebx
 mov	 ax, '0x'
 stosw
 lodsd
 push	 ecx
 cinvoke wsprintf, edi, st_fmat, eax, 0
 pop	 ecx
 add	 edi, 8
 mov	 ax, ', '
 stosw
 loop	 @B
 mov	 eax, edi
 pop	 ebx
 pop	 edi
 pop	 esi
 leave
 retn	 0Ch

entry $
 pushad
 push	 aes_dec_size
 push	 aes_dec_begin
 push	 buffer
 call	 make_c_array
 push	 aes_enc_size
 push	 aes_enc_begin
 push	 eax
 call	 make_c_array
 invoke  _lcreat, fl_name, 0
 mov	 esi, eax
 mov	 edi, buffer
 invoke  lstrlen, edi
 invoke  _lwrite, esi, edi, eax
 invoke  _lclose, esi
 popad
 ret


section '.bss' code readable writeable

buffer rb 8000h * 4

section '.idata' import data readable writeable

  library kernel32, 'kernel32.dll',\
	  user32,   'user32.dll'

  include '%include%\api\kernel32.inc'
  include '%include%\api\user32.inc'